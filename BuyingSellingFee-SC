// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IBEP20 {
    function transfer(address recipient, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
}

contract CustomFeeToken {
    address public owner;
    uint256 public buyFee;
    uint256 public sellFee;
    IBEP20 public token;

    constructor(address _token, uint256 _buyFee, uint256 _sellFee) {
        owner = msg.sender;
        token = IBEP20(_token);
        buyFee = _buyFee;
        sellFee = _sellFee;
    }

    function buyTokens(uint256 amount) public payable {
        uint256 fee = amount * buyFee / 100;
        require(msg.value == fee, "Incorrect fee amount");
        token.transfer(msg.sender, amount - fee);
    }

    function sellTokens(uint256 amount) public {
        uint256 fee = amount * sellFee / 100;
        require(token.transferFrom(msg.sender, address(this), amount), "Transfer failed");
        require(token.balanceOf(address(this)) >= fee, "Insufficient balance for fee");
        token.transfer(owner, fee);
        token.transfer(msg.sender, amount - fee);
    }

    function setBuyFee(uint256 _buyFee) public {
        require(msg.sender == owner, "Only owner can modify fees");
        buyFee = _buyFee;
    }

    function setSellFee(uint256 _sellFee) public {
        require(msg.sender == owner, "Only owner can modify fees");
        sellFee = _sellFee;
    }
}
